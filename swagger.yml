swagger: '2.0'
info:
  description: Swagger defintion for the Yu-Shan API, part of the Anathema Project
  version: "1.0.0"
  title: Yu-Shan API
consumes:
  - "application/json"
produces:
  - "application/json"

host: api.yu-shan.com
schemes:
 - https
basePath: "/v1"


# Paths supported by the server application
paths:
  /{apikey}/users:
    parameters:
      - $ref: "#/parameters/apikeyParam"
    put:
      operationId: "users.new"
      tags:
        - "User"
      summary: "Create a new user given the login and password"
      description: "Creates a new entity using the provided auth information"
      responses:
        200:
          $ref: '#/responses/userResponse'
    get:
      operationId: "users.check"
      tags:
        - "User"
      summary: "Allows the user to get their ID"
      description: "Given authentication, returns the user's player object ID"
      responses:
        200:
          $ref: '#/responses/userResponse'
    post:
      operationId: "users.reset"
      tags:
        - "User"
      summary: "Resets the password for a given account"
      description: "Resets the users' password to what's provided in the body, and sends a reset email if auth fails"
      parameters:
        - $ref: "#/parameters/passwordResetBody" 

  /{apikey}/entities:
    parameters:
      - $ref: "#/parameters/apikeyParam"
    get:
      security: []
      operationId: "entities.read"
      parameters:
        - $ref: "#/parameters/idQuery"
        - $ref: "#/parameters/entityCategoryQuery"
        - $ref: "#/parameters/nameQuery"
        - $ref: "#/parameters/descriptionQuery"
        - $ref: "#/parameters/countQuery"
        - $ref: "#/parameters/pageQuery"
        - $ref: "#/parameters/methodQuery"
      tags:
        - "Entity"
      summary: "A list of one or many entities as specified by the query"
      description: "Read a list of entities"
      responses:
        200:
          $ref: '#/responses/entityResponse'
    put:
      operationId: "entities.add"
      tags:
        - "Entity"
      description: "Adds new entities"
      parameters:
        - $ref: '#/parameters/entityBody'
      responses:
        200:
          $ref: '#/responses/entityResponse'
    post:
      operationId: "entities.modify"
      tags: 
        - "Entity"
      description: "Modifies entities"
      parameters:
        - $ref: '#/parameters/entityBody'
      responses:
        200:
          $ref: '#/responses/entityResponse'
    delete:
      operationId: "entities.remove"
      tags: 
        - "Entity"
      description: "Deletes an entity. The parameter *must* be exactly identical to the existant entry on the server"
      parameters:
        - $ref: '#/parameters/entityDeleteBody'
      responses:
        200:
          $ref: '#/responses/entityResponse'

  /{apikey}/relationships:
    parameters:
      - $ref: "#/parameters/apikeyParam"
    get:
      security: []
      operationId: "relationships.read"
      parameters:
        - $ref: "#/parameters/idQuery"
        - $ref: "#/parameters/descriptionQuery"
        - $ref: "#/parameters/ownerQuery"
        - $ref: "#/parameters/propertyQuery"
        - $ref: "#/parameters/countQuery"
        - $ref: "#/parameters/pageQuery"
        - $ref: "#/parameters/methodQuery"
      tags:
        - "Relationship"
      summary: "Read a list of relationships"
      description: "Read a list of relationships"
      responses:
        200:
          $ref: '#/responses/relationshipResponse'
    put:
      operationId: "relationships.add"
      tags:
        - "Relationship"
      description: "Adds new relationships"
      summary: "Adds new relationships"
      parameters:
        - $ref: '#/parameters/relationshipBody'
      responses:
        200:
          $ref: '#/responses/relationshipResponse'
    post:
      operationId: "relationships.modify"
      tags:
        - "Relationship"
      description: "Modify relationships"
      summary: "Modify relationships"
      parameters:
        - $ref: '#/parameters/relationshipBody'
      responses:
        200:
          $ref: '#/responses/relationshipResponse'
    delete:
      operationId: "relationships.remove"
      tags:
        - "Relationship"
      description: "Removes relationships"
      summary: "Removes relationships"
      parameters:
        - $ref: '#/parameters/relationshipDeleteBody'
      responses:
        200:
          $ref: '#/responses/relationshipResponse'
      
securityDefinitions:
  basicAuth:
    type: basic

security:
  - basicAuth: []
          
parameters:
  apikeyParam:
    name: apikey
    in: path
    required: true
    type: string
    default: 'publius'
  methodQuery:
    in: query
    name: method
    required: false
    type: string
    default: 'and'
    enum: ['or', 'and']
  idQuery:
    in: query
    name: "id"
    description: "ID for the entity to search"
    required: false
    type: string
    default: '' 
  entityCategoryQuery:
    in: query
    name: "category"
    description: "Category of entity to lookup. If not included in the query, result will not depend on Category in any way"
    required: false
    type: string
    default: "rulebook"
    enum: ['rulebook', 'character', 'rule', 'user']
  nameQuery:
    in: query
    name: "name"
    description: "Name of entity to lookup. If not included in the query, result will not depend on Name in any way"
    required: false
    type: string
    default: ""
  descriptionQuery:
    in: query
    name: "description"
    description: "A substring to match against descriptions. Will return when the entire  provided substring matches against a part of the description. If not included in the query, result will not depend on the Description in any way"
    required: false
    type: string
    default: ""
  ownerQuery:
    in: query
    name: "owner"
    description: "The ID of the owner. Will return all Relationships with this owner"
    required: false
    type: string
    default: ""
  propertyQuery:
    in: query
    name: "property"
    description: "The ID of the property. Will return all Relationships for whome this is listed as property"
    required: false
    type: string
    default: ""
  countQuery:
    in: query
    name: "count"
    description: "Number of results to show"
    required: false
    type: integer
    default: 10
  pageQuery:
    in: query
    name: "page"
    description: "Page number to display. Depentent on count"
    required: false
    type: integer
    default: 1
  entityBody:
    in: "body"
    name: "body"
    description: "An array of mixed entities"
    required: true
    schema:
      type: array
      items: 
        $ref: '#/definitions/Entity'
  entityDeleteBody:
    in: body
    name: body
    description: "A single entity to delete"
    required: true
    schema:
      $ref: '#/definitions/Entity'
  relationshipBody:
    in: "body"
    name: "body"
    description: "an array of relationships"
    required: true
    schema:
      type: array
      items:
        $ref: '#/definitions/Relationship'
  relationshipDeleteBody:
    in: body
    name: body
    description: "A single entity to delete"
    required: true
    schema:
      $ref: '#/definitions/Relationship'
  passwordResetBody:
    in: body
    name: newpassword
    required: true
    schema:
      type: string
    description: "Used as a new password, if auth succeeds. If auth fails, this value is discarded and an email is sent asking for the user to provide a new password."

responses:
  userResponse:
    description: "Response indicating success of a user request"
    schema:
      type: object
      properties:
        resp:
          $ref: '#/definitions/ResultResp'
        data:
          type: array
          items:
            $ref: "#/definitions/EntityID"
        error:
          type: string
  loginCheckResponse:
    description: "Response indicating logged in status"
    schema:
      type: boolean
  entityResponse:
    description: "Response for an Entity modification or query request"
    schema:
      type: object
      properties:
        resp:
          $ref: '#/definitions/ResultResp'
        data:
          type: array
          items:
           $ref: '#/definitions/Entity'
        error:
          type: string
  relationshipResponse:
    description: "Response for an relationship query or modification"
    schema:
      type: object
      properties:
        resp:
          $ref: '#/definitions/ResultResp'
        data:
          type: array
          items:
           $ref: '#/definitions/Relationship'
        error:
          type: string

definitions:
  Entity:
    type: object
    additionalProperties: true
    discriminator: category
    properties:
      id:
        $ref: '#/definitions/EntityID'
      name:
        type: string
      description:
        type: string
      category:
        type: string
    required: 
      - name
      - category
      - id
  Relationship:
    type: object
    properties:
      id:
        type: string
      owner:
        $ref: '#/definitions/EntityID'
      property:
        $ref: '#/definitions/EntityID'
      description:
        type: string
    required:
      - id
      - owner
      - property
  EntityID:
    type: string
  character:
    type: object
    allOf: 
      - $ref: '#/definitions/Entity'
      - type: object
        properties:
          subcategory:
            type: string
  rulebook:
    $ref: '#/definitions/Entity'
  rule:
    allOf:
      - $ref: '#/definitions/Entity'
      - type: object
        properties:
          subcategory: 
            type: string
          
          
  ResultResp:
    type: integer
    minimum: 0
    maximum: 10